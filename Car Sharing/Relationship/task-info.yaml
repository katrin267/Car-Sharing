type: edu
files:
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the 'COMPANY' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in 'COMPANY' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();
            return correct();
        }

        @DynamicTest
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/db/carsharing3.mv.db
  visible: true
  learner_created: true
- name: src/carsharing/db/carsharing3.trace.db
  visible: true
  learner_created: true
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  learner_created: true
- name: src/carsharing/CompanyDatabase.java
  visible: true
  text: |+
    package carsharing;

    import java.sql.*;

    public class CompanyDatabase {

        // JDBC driver name and database URL
        private final String JDBC_DRIVER = "org.h2.Driver";
        private String DB_URL;
        private Connection conn = null;
        private Statement stmt = null;


        public CompanyDatabase(String dbName) {
            this.DB_URL = "jdbc:h2:file:C:/Users/Георгий/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/" + dbName;
            createDatabase();
            createTable();
        }

        private void createDatabase() {

            try {
                // STEP 1: Register JDBC driver
                Class.forName(JDBC_DRIVER);

                //STEP 2: Open a connection
    //            System.out.println("Connecting to database...");
                conn = DriverManager.getConnection(DB_URL);
                conn.setAutoCommit(true);
            } catch (SQLException se) {
                //Handle errors for JDBC
                se.printStackTrace();
            } catch (Exception e) {
                //Handle errors for Class.forName
                e.printStackTrace();
            }
        }

        private void createTable() {
            String sql = "CREATE TABLE IF NOT EXISTS COMPANY " +
                    "(ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT, " +
                    " NAME VARCHAR(255) UNIQUE NOT NULL)";
            executeQuery(sql);
        }

        void addCompany(String companyName) {
            String sql = "INSERT INTO COMPANY (NAME) VALUES ( '" + companyName + "' )";
            executeQuery(sql);
            System.out.println("The company was created!");
        }

        void showCompaniesList() {
            String sql = "SELECT ID, NAME from COMPANY ORDER BY ID";
            ResultSet rs = executeSelect(sql);
            // Extract data from result set
            int i = 0;
            try {
                while (rs.next()) {
                    if (i == 0) {
                        System.out.println("Company list:");
                    }
                    // Retrieve by column name
                    int compId = rs.getInt("ID");
                    String compName = rs.getString("NAME");

                    // Display values
                    System.out.println(compId + ". " + compName);
                    i++;
                }
                if (i == 0) {
                    System.out.println("The company list is empty!");
                }
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        private void executeQuery(String sql) {
    //        Connection conn = null;
    //        Statement stmt = null;

            try {
    //            // STEP 1: Register JDBC driver
    //            Class.forName(JDBC_DRIVER);
    //
    //            //STEP 2: Open a connection
    //            System.out.println("Connecting to database...");
    //            conn = DriverManager.getConnection(DB_URL);
    //            conn.setAutoCommit(true);

                //STEP 3: Execute a query
    //            System.out.println("Creating table in given database...");
                stmt = conn.createStatement();
                stmt.executeUpdate(sql);
    //            System.out.println("Created table in given database...");

                // STEP 4: Clean-up environment
    //            stmt.close();
    //            conn.close();
            } catch (SQLException se) {
                //Handle errors for JDBC
                se.printStackTrace();
            } catch (Exception e) {
                //Handle errors for Class.forName
                e.printStackTrace();
    //        } finally {
    //            //finally block used to close resources
    //            try {
    //                if (stmt != null) stmt.close();
    //            } catch (SQLException se2) {
    //            } // nothing we can do
    //            try {
    //                if (conn != null) conn.close();
    //            } catch (SQLException se) {
    //                se.printStackTrace();
    //            } //end finally try
            } //end try
        }

        private ResultSet executeSelect(String sql) {
            ResultSet rs = null;

            try {
    //            // STEP 1: Register JDBC driver
    //            Class.forName(JDBC_DRIVER);
    //
    //            //STEP 2: Open a connection
    //            System.out.println("Connecting to database...");
    //            conn = DriverManager.getConnection(DB_URL);
    //            conn.setAutoCommit(true);

                //STEP 3: Execute a query
    //            System.out.println("Creating query in given database...");
                stmt = conn.createStatement();
                rs = stmt.executeQuery(sql);
    //            System.out.println("Created select in given database...");

                // STEP 4: Clean-up environment
    //            stmt.close();
    //            conn.close();
            } catch (SQLException se) {
                //Handle errors for JDBC
                se.printStackTrace();
            } catch (Exception e) {
                //Handle errors for Class.forName
                e.printStackTrace();
    //        } finally {
    //            //finally block used to close resources
    //            try {
    //                if (stmt != null) stmt.close();
    //            } catch (SQLException se2) {
    //            } // nothing we can do
    //            try {
    //                if (conn != null) conn.close();
    //            } catch (SQLException se) {
    //                se.printStackTrace();
    //            } //end finally try
            } //end try

            return rs;
        }

    }


  learner_created: true
- name: src/carsharing/Menu.java
  visible: true
  text: |
    package carsharing;

    import java.util.Scanner;

    public class Menu {
        private Scanner scanner = new Scanner(System.in);
        private CompanyDatabase dataBase;


        Menu(String dbName) {
            dataBase = new CompanyDatabase(dbName);
        }

        void mainMenu() {
            while (true) {
                System.out.println("1. Log in as a manager");
                System.out.println("0. Exit");
                switch (scanner.nextLine()) {
                    case "1":
                        showSubMenu();
                        break;
                    case "0":
                        System.exit(0);
                        break;
                    default:
                        break;
                }
            }
        }

        private void showSubMenu() {
            while (true) {
                System.out.println("1. Company list");
                System.out.println("2. Create a company");
                System.out.println("0. Back");
                switch (scanner.nextLine()) {
                    case "1":
                        dataBase.showCompaniesList();
                        break;
                    case "2":
                        System.out.println("Enter the company name:");
                        dataBase.addCompany(scanner.nextLine());
                        break;
                    case "0":
                        return;
                    default:
                        break;
                }
            }
        }
    }
  learner_created: true
- name: src/carsharing/DbClass.java
  visible: true
  text: |+
    package carsharing;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class DbClass {

        // JDBC driver name and database URL
        static final String JDBC_DRIVER = "org.h2.Driver";
        final String DB_URL = "jdbc:h2:file:C:/Users/Георгий/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/";


        //  Database credentials
    //    static final String USER = "sa";
    //    static final String PASS = "";


        public void createDatabase(String dbName) {
            Connection conn = null;

            try {
                // STEP 1: Register JDBC driver
                Class.forName(JDBC_DRIVER);

                //STEP 2: Open a connection
                System.out.println("Connecting to database...");
                conn = DriverManager.getConnection(DB_URL + dbName);
                conn.setAutoCommit(true);
            } catch (SQLException se) {
                //Handle errors for JDBC
                se.printStackTrace();
            } catch (Exception e) {
                //Handle errors for Class.forName
                e.printStackTrace();
            }
        }

        public void createTable(String dbName) {
            Connection conn = null;
            Statement stmt = null;

            try {
                // STEP 1: Register JDBC driver
                Class.forName(JDBC_DRIVER);

                //STEP 2: Open a connection
                System.out.println("Connecting to database...");
                conn = DriverManager.getConnection(DB_URL + dbName);
                conn.setAutoCommit(true);

                //STEP 3: Execute a query
                System.out.println("Creating table in given database...");
                stmt = conn.createStatement();
                String sql = "SELECT NAME from COMPANY";
                stmt.executeUpdate(sql);
                System.out.println("Created table in given database...");

                // STEP 4: Clean-up environment
                stmt.close();
                conn.close();
            } catch (SQLException se) {
                //Handle errors for JDBC
                se.printStackTrace();
            } catch (Exception e) {
                //Handle errors for Class.forName
                e.printStackTrace();
            } finally {
                //finally block used to close resources
                try {
                    if (stmt != null) stmt.close();
                } catch (SQLException se2) {
                } // nothing we can do
                try {
                    if (conn != null) conn.close();
                } catch (SQLException se) {
                    se.printStackTrace();
                } //end finally try
            } //end try
        }

        public void addCompany(String dbName, String companyName) {
            Connection conn = null;
            Statement stmt = null;

            try {
                // STEP 1: Register JDBC driver
                Class.forName(JDBC_DRIVER);

                //STEP 2: Open a connection
                System.out.println("Connecting to database...");
                conn = DriverManager.getConnection(DB_URL + dbName);
                conn.setAutoCommit(true);

                //STEP 3: Execute a query
                System.out.println("Adding company");
                stmt = conn.createStatement();

                String sql = "INSERT INTO COMPANY (NAME) VALUES ( '" + companyName + "' )";
                stmt.executeUpdate(sql);
                System.out.println("Created table in given database...");

                // STEP 4: Clean-up environment
                stmt.close();
                conn.close();
            } catch (SQLException se) {
                //Handle errors for JDBC
                se.printStackTrace();
            } catch (Exception e) {
                //Handle errors for Class.forName
                e.printStackTrace();
            }
        }
    }


  learner_created: true
feedback_link: https://hyperskill.org/projects/140/stages/760/implement
status: Solved
record: 3
